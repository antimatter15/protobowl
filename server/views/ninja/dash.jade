script(src="/socket.io/socket.io.js")
script(src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js")
link(rel="stylesheet", href="/protobowl.css")
title PATRIOT ACT SïgnälTap
style
	body { 
		font-family: sans-serif; 
		display: -webkit-flex; 
		font-size: 13px;
		-webkit-flex-flow: row wrap;
	}
	p {
		margin: 0;
	}

	a.user {
		font-weight: bold;
		text-decoration: none;
		color: black;

	}
	.verb {
		font-style: italic;
	}
	.verb .user {
		font-weight: normal;
	}
	div.room { 
		margin: 5px; 
		padding: 10px;
		min-width: 250px;
		-webkit-flex: auto;
	}
	.messages {
		max-width: 400px;
	}
	.datetime { font-style: italic; }
	span.reveal, .status { font-style: italic; }
	h1 { font-size: 120%; margin: 0 }

.room.thumbnail(style="min-width: 100px")
	p
		a(href="/stalkermode") &larr; Stalkermode View 
	p
		h1 <span id="active">?</span> Active Users 
		| <b>peak</b>: <span id="peakactive">?</span> <br> <b>min</b>: <span id="minactive">?</span> 
		h1 <span id="online">?</span> Online Users 
		| <b>peak</b>: <span id="peakonline">?</span> <br> <b>min</b>: <span id="minonline">?</span> 
		h1 Latency <span id="latency">?</span>
		| <b>peak</b>: <span id="peaklatency">?</span> <br> <b>min</b>: <span id="minlatency">?</span> 
	hr
	p
		button.btn#roomsort Sort Rooms

script
	sock = io.connect()
	rooms = {}
	function userSpan(ustr, room){
		var span = document.createElement('a');
		var parts = ustr.split('-');
		var id = parts[0];
		span.href = '/stalkermode/user/' + room + '/' + id
		var name = parts.slice(1).join('-');
		span.className = id + ' user';
		span.innerText = name;
		return span
	}

	$('#roomsort').click(function(){
		$('.room.real').sortElements(function(a,b){
			return b.activity - a.activity
		})
	})

	setInterval(function(){
		for(var i in rooms){
			if(new Date - rooms[i].lastUpdate > 1000 * 60 * 5){
				rooms[i].parentNode.removeChild(rooms[i]);
				delete rooms[i];
			}

		}
	}, 1000);
	setInterval(function(){
		for(var i in rooms){
			var line = document.createElement('p');
			line.className = 'datetime'
			line.innerText = (new Date()).toString();
			//rooms[i].messages.appendChild(line);
			var room = i;
			$(rooms[room].messages).append($(line))
			$(line).hide();
			$(line).slideDown();
			if(rooms[room].messages.childNodes.length > 20){
				$(rooms[room].messages.childNodes).slice(0, -20).slideUp('normal', function(){
					$(this).remove()
				})
			}
		}
	}, 1000 * 60);
	var start_time = Date.now();
	function addLine(room, line){
		if(!rooms[room]){
			rooms[room] = document.createElement('div');
			document.body.appendChild(rooms[room])
			var headerlink = document.createElement('a');
			headerlink.href = '/' + room + '?ninja'
			var header = document.createElement('h1');
			header.innerText = room;
			headerlink.appendChild(header)
			rooms[room].className = 'room thumbnail real';
			rooms[room].appendChild(headerlink)
			rooms[room].messages = document.createElement('div')
			rooms[room].messages.className = 'messages'
			rooms[room].appendChild(rooms[room].messages);
			rooms[room].activity = start_time;
		}
		if(rooms[room].messages.childNodes.length > 20){
			$(rooms[room].messages.childNodes).slice(0, -20).slideUp('normal', function(){
				$(this).remove()
			})
		}
		$(rooms[room].messages).append($(line))
		$(line).hide();
		$(line).slideDown();
		rooms[room].lastUpdate = Date.now();
		var rat = 0.9999;
		rooms[room].activity = rooms[room].activity * rat + Date.now() * (1 - rat);
	}
	sock.on('chat', function(e){
		var room = e[0];
		var user = e[1];
		var message = e[2];
		
		var line = document.createElement('p');
		line.appendChild(userSpan(user, room))
		line.appendChild(document.createTextNode(' '))
		line.appendChild(document.createTextNode(message.replace(/\!\@\w+/g, '')))
		addLine(room, line)
		console.log('chat', e)
	})
	sock.on('verb', function(e){
		var room = e[0];
		var user = e[1];
		var message = e[2];
		
		var line = document.createElement('p');
		line.className = 'verb'
		line.appendChild(userSpan(user, room))
		line.appendChild(document.createTextNode(' '))
		line.appendChild(document.createTextNode(message))
		addLine(room, line)
		console.log('chat', e)
	})
	sock.on('buzz', function(e){
		console.log('buzz', e);
		var room = e[0];
		var user = e[1];
		var guess = e[2];
		var answer = e[3];
		var ruling = e[4];
		var line = document.createElement('p');
		line.innerHTML = '<span class="label label-important">Buzz</span> '
		line.appendChild(userSpan(user, room))
		line.appendChild(document.createTextNode(' '))
		line.appendChild(document.createTextNode(guess));
		var rul = document.createElement('span');
		rul.className = 'label ' + (ruling ? 'label-success':'label-warning');
		rul.innerText = ruling ? 'Correct': 'Wrong';
		line.appendChild(document.createTextNode(' '))
		line.appendChild(rul);
		line.title = answer;
		// var reveal = document.createElement('span');
		// reveal.className = 'reveal'
		// reveal.innerText = answer;
		// line.appendChild(document.createTextNode(' '))
		// line.appendChild(reveal)

		
		addLine(room, line)
	})

	var active_data = [], online_data = [], latency_data = [];
	function find_min(list){
		var min = [9999999, 0];
		for(var i = 0; i < list.length; i++){
			if(list[i][0] < min[0]) min = list[i];
		}
		return min
	}
	function find_max(list){
		var max = [-999999, 0];
		for(var i = 0; i < list.length; i++){
			if(list[i][0] > max[0]) max = list[i];
		}
		return max
	}
	function format_result(tuple){
		return tuple[0] + " @" + tuple[1].toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1")
	}
	sock.on('user_count', function(e){
		active_data.push([e.active, new Date]);
		online_data.push([e.online, new Date]);
		latency_data.push([Math.round(e.avg_latency * 100) / 100, new Date])

		console.log('user_count', e)
		document.getElementById('active').innerText = e.active;
		document.getElementById('latency').innerText = e.avg_latency.toFixed(2) + 'ms ±' + e.std_latency.toFixed(2)

		document.getElementById('online').innerText = e.online;
		document.getElementById('peaklatency').innerText = format_result(find_max(latency_data));
		document.getElementById('minlatency').innerText = format_result(find_min(latency_data));

		document.getElementById('peakactive').innerText = format_result(find_max(active_data));
		document.getElementById('minactive').innerText = format_result(find_min(active_data));
		document.getElementById('peakonline').innerText = format_result(find_max(online_data));
		document.getElementById('minonline').innerText = format_result(find_min(online_data));

		var line = document.createElement('p');
		line.className = 'status';
		line.innerText = e.message.replace(/ [0-9a-z]+\-/, ' ')
		addLine(e.room, line);
	})

	jQuery.fn.sortElements = function() {
	var a = [].sort;
	return function(b, c) {
	c = c || function() {
	return this
	};
	var d = this.map(function() {
	var a = c.call(this), b = a.parentNode, d = b.insertBefore(document.createTextNode(""), a.nextSibling);
	return function() {
	if(b === this) {
	throw Error("You can't sort elements if any one is a descendant of another.");
	}
	b.insertBefore(this, d), b.removeChild(d)
	}
	});
	return a.call(this, b).each(function(a) {
	d[a].call(c.call(this))
	})
	}
	}();
